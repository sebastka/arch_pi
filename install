#!/bin/sh
set -e      # Abort upon error
set -u      # Abort upon udefined variable
#set -x      # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#    Arch ARMv7 on RPI4
#    Assumes a wired connection on $CONFIG_LAN_INTERFACE
#
#    Arguments:
#        None!
#    Returns:
#        1 upon error
#        0 otherwise
#######################################
main() {
    readonly USAGE="Usage: ./install"
    [ "$#" -eq 0 ] || { err "Error: 0 argument expected, $# received"; err "$USAGE"; return 1; }
    [ -f "$path/.env" ] || { err 'Error: Please configure .env'; return 3; }

    load_env
    init
    install_base
    install_wireguard
    install_docker

    printf '\nDone. Please reboot\n'
}

# Load env
load_env() {
    set -a; . "$path/.env"; set +a
}

init() {
    # If sudo is installed, init() has already been run (as root): continue
    if command -v sudo >/dev/null; then
        [ "$(id -u)" -ne 0 ] || { err 'Error: Please DO NOT run as root'; return 2; }
        return 0
    else
        [ "$(id -u)" -eq 0 ] || { err 'Error: Please run as root'; return 2; }
    fi

    printf '\nInitialize...\n'

    # Disable wlan0
    ip link set wlan0 down

    # Locale
    timedatectl set-ntp true
    locale-gen

    # Pacman
    pacman-key --init
    pacman-key --populate archlinuxarm
    pacman -Syu --noconfirm

    # Sudo
    pacman -S sudo
    sed -i '/%wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers

    printf '\nRun again as unprivileged user\n'
    exit 0
}

# Install base system
install_base() {
    printf '\nInstalling base system...\n'

    # Install basic packages
    sudo pacman -S --noconfirm --needed base-devel btrfs-progs man-db man-pages dnsutils git vim wget htop dhcp

    # Install extra packages
    sudo pacman -S --noconfirm --needed $CONFIG_SYSTEM_EXTRA_PACKAGES
    aur_install $CONFIG_SYSTEM_EXTRA_PACKAGES_AUR
}

install_wireguard() {
	## Using systemd-networkd's native WireGuard support
	## https://elou.world/en/tutorial/wireguard
	## https://wiki.archlinux.org/title/WireGuard

	sudo pacman -S --noconfirm --needed wireguard-tools qrencode

    # IP forwarding
    printf 'net.ipv4.ip_forward = 1\nnet.ipv4.conf.all.forwarding = 1\nnet.ipv6.conf.all.forwarding = 1\nnet.ipv4.conf.all.src_valid_mark = 1\n' \
        | sudo tee /etc/sysctl.d/30-ipforward.conf >/dev/null

    # Create "server" peer dir
    sudo mkdir -p /etc/wireguard/wg0.conf.d/clients /etc/wireguard/wg0.conf.d/server

    # Gen "server" peer priv/pub keys
	wg genkey \
        | sudo tee "/etc/wireguard/wg0.conf.d/server/$CONFIG_SERVER_HOSTNAME.private.key" \
        | wg pubkey \
        | sudo tee "/etc/wireguard/wg0.conf.d/server/$CONFIG_SERVER_HOSTNAME.public.key" >/dev/null

    # "Server" variables
    export WG_SRV_IP="$(echo "$CONFIG_WIREGUARD_SUBNET" | sed 's/.\//1\//')"
    export WG_SRV_PUBKEY="$(sudo cat "/etc/wireguard/wg0.conf.d/server/$CONFIG_SERVER_HOSTNAME.public.key")"
    export WG_PEER_IP="$(echo "$CONFIG_WIREGUARD_SUBNET" | cut -d'.' -f1-3).\${WG_PEER_NB}"
    SUBST_VARS='$WG_SRV_IP,$WG_SRV_PUBKEY,$WG_PEER_IP'

    # "Server" peer config: create base config
    cat "$path/root/etc/wireguard/wg0.conf" \
            | envsubst "$SUBST_VARS" \
            | sudo tee /etc/wireguard/wg0.conf >/dev/null

    # "Server" peer config: create "client" peer template
    sudo cat "$path/root/etc/wireguard/wg0.conf.d/server/peer.template.conf" \
            | envsubst "$SUBST_VARS" \
            | sudo tee /etc/wireguard/wg0.conf.d/server/peer.template.conf

    # "Client" peer config: create template config
    sudo cat "$path/root/etc/wireguard/wg0.conf.d/clients/peer.template.conf" \
            | envsubst "$SUBST_VARS" \
            | sudo tee /etc/wireguard/wg0.conf.d/clients/peer.template.conf

    # Create "client" peers
    i=1
    for peer_name in $CONFIG_WIREGUAR_PEERS; do
        i=$((i+1))

        # Gen priv/pub keys
        wg genkey \
            | sudo tee "/etc/wireguard/wg0.conf.d/clients/$peer_name.private.key" \
            | wg pubkey \
            | sudo tee "/etc/wireguard/wg0.conf.d/clients/$peer_name.public.key" >/dev/null

        # Gen preshared key
        wg genpsk | sudo tee "/etc/wireguard/wg0.conf.d/clients/$peer_name-$CONFIG_SERVER_HOSTNAME.psk" >/dev/null

        # "Client" peer variables
        export WG_PEER_NAME="$peer_name"
        export WG_PEER_NB="$i"
        export WG_PEER_PRIVKEY="$(sudo cat "/etc/wireguard/wg0.conf.d/clients/$peer_name.private.key")"
        export WG_PEER_PUBKEY="$(sudo cat "/etc/wireguard/wg0.conf.d/clients/$peer_name.public.key")"
        export WG_PSK="$(sudo cat "/etc/wireguard/wg0.conf.d/clients/$peer_name-$CONFIG_SERVER_HOSTNAME.psk")"
        export WG_EXTRA_ROUTES=''
        SUBST_VARS='$WG_PEER_NAME,$WG_PEER_NB,$WG_PEER_PRIVKEY,$WG_PEER_PUBKEY,$WG_PSK,$WG_EXTRA_ROUTES'

        # Server conf: add peer
        sudo cat /etc/wireguard/wg0.conf.d/server/peer.template.conf \
            | envsubst "$SUBST_VARS" \
            | sudo tee -a /etc/wireguard/wg0.conf >/dev/null

        # Client conf: create
        sudo cat /etc/wireguard/wg0.conf.d/clients/peer.template.conf \
            | envsubst "$SUBST_VARS" \
            | sudo tee "/etc/wireguard/wg0.conf.d/clients/$peer_name.conf" >/dev/null

        # Generate QR code for config
        sudo qrencode -t ansiutf8 \
            -r "/etc/wireguard/wg0.conf.d/clients/$peer_name.conf" \
            -o "/etc/wireguard/wg0.conf.d/clients/$peer_name.conf.png"
    done

    # Update permissions
    sudo chown -R root:root /etc/wireguard
    sudo find /etc/wireguard -type d -exec chmod 755 {} \;
    sudo find /etc/wireguard -type f -exec chmod 640 {} \;
    sudo find /etc/wireguard -type f \( -name *.public.key -o -name peer.template.conf -o -name wg0.conf \) -exec chmod 644 {} \;

    # Enable service
    sudo systemctl enable wg-quick@wg0
}

# Setup Docker
install_docker() {
    printf '\nSetting up Docker...\n'

    sudo pacman -S --noconfirm docker docker-compose
    sudo systemctl enable docker # Reboot is needed before it can start

    # Some containers require an initial setup
    find /home/"$CONFIG_USER_NAME"/docker -name prepare.sh -exec ./{} \;

    # Terminate
    printf '\nAfter reboot, run "~/docker/update x" to get the x container started.\n'
}

# Install from AUR
aur_install() {
    mkdir /tmp/aur

    for package in $@; do
        git clone "https://aur.archlinux.org/$package.git/" "/tmp/aur/$package"
        cd "/tmp/aur/$package"
        makepkg --noconfirm -s

        sudo pacman --noconfirm -U "/tmp/aur/$package"/*.pkg.tar.xz
    done

    rm -rf "/tmp/aur"
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit
