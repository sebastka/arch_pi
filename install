#!/bin/sh
set -e      # Abort upon error
set -u      # Abort upon udefined variable
#set -x      # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#    Arch ARMv7 on RPI4
#    Assumes a wired connection on $CONFIG_LAN_INTERFACE
#
#    Arguments:
#        None!
#    Returns:
#        1 upon error
#        0 otherwise
#######################################
main() {
    readonly USAGE="Usage: ./install"
    [ "$#" -eq 0 ] || { err "Error: 0 argument expected, $# received"; err "$USAGE"; return 1; }
    [ -f "$path/.env" ] || { err 'Error: Please configure .env'; return 3; }

    load_env
    init
    install_base
    install_nfs
    install_docker

    printf '\nDone. Please reboot\n'
}

# Load env
load_env() {
    set -a; . "$path/.env"; set +a
}

init() {
    # If sudo is installed, init() has already been run (as root): continue
    if command -v sudo >/dev/null; then
        [ "$(id -u)" -ne 0 ] || { err 'Error: Please DO NOT run as root'; return 2; }
        return 0
    else
        [ "$(id -u)" -eq 0 ] || { err 'Error: Please run as root'; return 2; }
    fi

    printf '\nInitialize...\n'

    # Disable wlan0
    ip link set wlan0 down

    # Locale
    timedatectl set-ntp true
    locale-gen

    # Pacman
    pacman-key --init
    pacman-key --populate archlinuxarm
    pacman -Syu --noconfirm

    # Sudo
    pacman -S sudo
    sed -i '/%wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers

    printf '\nRun again as unprivileged user\n'
    exit 0
}

# Install base system
install_base() {
    printf '\nInstalling base system...\n'

    # Install basic packages
    sudo pacman -S --noconfirm --needed base-devel btrfs-progs man-db man-pages dnsutils git vim wget htop dhcp

    # Install extra packages
    sudo pacman -S --noconfirm --needed $CONFIG_SYSTEM_EXTRA_PACKAGES
    aur_install $CONFIG_SYSTEM_EXTRA_PACKAGES_AUR
}

# Setup NFS
install_nfs() {
    sudo pacman -S --noconfirm --needed nfs-utils

    # Helper function
    get_opts() {
        printf '%s,\n' "$share_to" \
            | sed "s/,/($options) /g" \
            | sed 's/ $//'
    }

    # Set up shares from config
    printf $CONFIG_NFS | while read line; do
        name="$(echo "$line" | cut -d',' -f1)"
        share_to="$(echo "$line" | cut -d',' -f2-)"

        mkdir -p "/home/$CONFIG_USER_NAME/nfs/$name"
        sudo mkdir -p "/mnt/nfs/$name"

        sudo mount --bind "/home/$CONFIG_USER_NAME/nfs/$name" "/mnt/nfs/$name"

        # Add mount to fstab
        printf '/home/%s/nfs/%s\t/mnt/nfs/%s\tnone\tbind\t0\t0\n' "$CONFIG_USER_NAME" "$name" "$name" \
            | sudo tee -a /etc/fstab >/dev/null

        # If /etc/exports is empty, export /mnt/nfs
        if [ -z "$(sed '/^#/d' /etc/exports)" ]; then
            options="rw,sync,no_subtree_check,crossmnt,fsid=$(id -u)"

            printf '/mnt/nfs\t%s\n' "$(get_opts)" \
                | sudo tee -a /etc/exports >/dev/null
        fi

        # Export /mnt/nfs/x
        options='rw,sync,no_subtree_check'
        printf '/mnt/nfs/%s\t%s\n' "$name" "$(get_opts)" \
            | sudo tee -a /etc/exports >/dev/null

        # On client /etc/fstab:
        # CONFIG_LAN_IP:/mnt/nfs/$name /mnt/point nfs _netdev,noauto,user,x-systemd.automount,x-systemd.mount-timeout=10,timeo=14,x-systemd.idle-timeout=1min    0 0
    done

    sudo systemctl enable nfs-server.service
}

# Setup Docker
install_docker() {
    printf '\nSetting up Docker...\n'

    sudo pacman -S --noconfirm docker docker-compose
    sudo systemctl enable docker # Reboot is needed before it can start

    # Some containers require an initial setup
    find /home/"$CONFIG_USER_NAME"/docker -name prepare.sh -exec ./{} \;

    # Terminate
    printf '\nAfter reboot, run "~/docker/update x" to get the x container started.\n'
}

# Install from AUR
aur_install() {
    mkdir /tmp/aur

    for package in $@; do
        git clone "https://aur.archlinux.org/$package.git/" "/tmp/aur/$package"
        cd "/tmp/aur/$package"
        makepkg --noconfirm -s

        sudo pacman --noconfirm -U "/tmp/aur/$package"/*.pkg.tar.xz
    done

    rm -rf "/tmp/aur"
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit
