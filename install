#!/bin/sh
set -e      # Abort upon error
set -u      # Abort upon udefined variable
#set -x      # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#    Arch ARMv7 on RPI4
#    Assumes a wired connection on $CONFIG_LAN_INTERFACE
#
#    Arguments:
#        None!
#    Returns:
#        1 upon error
#        0 otherwise
#######################################
main() {
    readonly USAGE="Usage: ./install"
    [ "$#" -eq 0 ] || { err "Error: 0 argument expected, $# received"; err "$USAGE"; return 1; }
    [ "$(id -u)" -eq 0 ] || { err 'Error: Please run as root'; return 2; }
    [ -f "$path/.env" ] || { err 'Error: Please configure .env'; return 3; }

    load_env

    timedatectl set-ntp true
    locale-gen

    setup_users
    install_base
    setup_ssh
    install_wireguard
    install_docker

    printf '\nDone. Please reboot\n'
}

# Load env
load_env() {
    set -a; . "$path/.env"; set +a
}

# Update users and passwords
setup_users() {
    printf '\nCreating new user...\n'
    useradd -m -G wheel -s /bin/bash "$CONFIG_USER_NAME"
    
    printf '\nSetting root pw...\n'
    passwd root

    printf '\nSetting alarm pw...\n'
    passwd alarm

    printf '\nSetting %s pw...\n' "$CONFIG_USER_NAME"
    passwd "$CONFIG_USER_NAME"

    # Allow members of wheel group to run sudo
    sed -i '/%wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers
}

# Install base system
install_base() {
    printf '\nInstalling base system...\n'

    # Get keys and update system
    pacman-key --init
    pacman-key --populate archlinuxarm
    pacman -Syu --noconfirm

    # Install basic packages
    pacman -S --noconfirm --needed sudo base-devel btrfs-progs dnsutils git vim wget htop

    # Install extra packages
    pacman -S --noconfirm --needed $CONFIG_SYSTEM_EXTRA_PACKAGES
    aur_install $CONFIG_SYSTEM_EXTRA_PACKAGES_AUR
}

# Import priv/pubkey
setup_ssh() {
    printf '\nImporting SSH keys...\n'

    # Write ssh key pair
    if [ ! -z "$CONFIG_USER_PRIVKEY" ]; then
        # Write key
        mkdir -p "/home/$CONFIG_USER_NAME/.ssh/keys"
        echo "$CONFIG_USER_PRIVKEY" > "/home/$CONFIG_USER_NAME/.ssh/keys/$CONFIG_USER_NAME@$CONFIG_SERVER_HOSTNAME"

        # Fix permissions
        find "/home/$CONFIG_USER_NAME/.ssh/" -type d -exec chmod 700 {} \;
        find "/home/$CONFIG_USER_NAME/.ssh/" -type f -exec chmod 600 {} \;
    fi

    # Authorize keylogin for new user
    mkdir -p "/home/$CONFIG_USER_NAME/.ssh"
    echo "$CONFIG_USER_AUTHORIZED_KEYS" > "/home/$CONFIG_USER_NAME/.ssh/authorized_keys"
    chown -R "$(id -u $CONFIG_USER_NAME):$(id -g "$CONFIG_USER_NAME")" "/home/$CONFIG_USER_NAME/.ssh/"
}

install_wireguard() {
	## Using systemd-networkd's native WireGuard support
	## https://elou.world/en/tutorial/wireguard
	## https://wiki.archlinux.org/title/WireGuard

	pacman -S --needed wireguard-tools qrencode

    # IP forwarding
    printf 'net.ipv4.ip_forward = 1\nnet.ipv4.conf.all.forwarding = 1\nnet.ipv6.conf.all.forwarding = 1\nnet.ipv4.conf.all.src_valid_mark = 1\n' \
        tee /etc/sysctl.d/30-ipforward.conf > /dev/null

    # Create "server" peer dir
    mkdir -p "/etc/wireguard/$CONFIG_SERVER_HOSTNAME/server" "/etc/wireguard/$CONFIG_SERVER_HOSTNAME/clients"
	cd "/etc/wireguard"

    # Gen "server" peer priv/pub keys
	wg genkey \
        | (umask 0077 && tee "$CONFIG_SERVER_HOSTNAME/server/$CONFIG_SERVER_HOSTNAME.private.key") \
        | wg pubkey > "$CONFIG_SERVER_HOSTNAME/server/$CONFIG_SERVER_HOSTNAME.public.key"

    # "Server" peer variables
    srv_ip="$(echo "$CONFIG_WIREGUARD_SUBNET" | cut -d'.' -f1-3).1"
    srv_priv_key="$(cat "$CONFIG_SERVER_HOSTNAME/server/$CONFIG_SERVER_HOSTNAME.private.key")"
    srv_pub_key="$(cat "$CONFIG_SERVER_HOSTNAME/server/$CONFIG_SERVER_HOSTNAME.public.key")"

    # Create "server" peer conf
    printf '[Interface]\nAddress = %s\nListenPort = 51820\nPrivateKey = %s\n\n' \
        "$srv_ip" "$srv_priv_key" \
        > "wg0.conf"

    # Create "client" peers
    i=1
    for peer_name in $CONFIG_WIREGUAR_PEERS; do
        i=$((i+1))

        # Gen priv/pub keys + preshared key
        wg genkey \
            | (umask 0077 && tee "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.private.key") \
            | wg pubkey > "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.public.key"
        wg genpsk > "$CONFIG_SERVER_HOSTNAME/clients/$peer_name-$CONFIG_SERVER_HOSTNAME.psk"

        # "Client" peer variables
        client_ip="$(echo "$CONFIG_WIREGUARD_SUBNET" | cut -d'.' -f1-3).$i"
        client_pub_key="$(cat "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.public.key")"
        client_priv_key="$(cat "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.private.key")"
        psk="$(cat "$CONFIG_SERVER_HOSTNAME/clients/$peer_name-$CONFIG_SERVER_HOSTNAME.psk")"

        # Add "client" peer to "server" peer config

        printf '[Peer]\n# %s\nPublicKey = %s\nPresharedKey = %s\nAllowedIPs = %s\n\n' \
            "$peer_name" "$client_pub_key" "$psk" "$client_ip" \
            >> "wg0.conf"

        # Create peer "client" config

        printf '[Interface]\nAddress = %s\nListenPort = 51820\nPrivateKey = %s\nDNS=%s\n\n' \
            "$client_ip" "$client_priv_key" "$CONFIG_LAN_IP" \
            > "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.conf"

        printf '[Peer]\n# %s\nPublicKey = %s\nPresharedKey = %s\nEndpoint = %s:%s\nAllowedIPs = %s,%s\n' \
            "$CONFIG_SERVER_HOSTNAME" "$srv_pub_key" "$psk" "$CONFIG_SERVER_REMOTE_URL" "$CONFIG_WIREGUARD_EXTERNAL_PORT" "$CONFIG_LAN_NETWORK" "$srv_ip" \
            >> "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.conf"

        qrencode -t ansiutf8 \
            -r "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.conf" \
            -o "$CONFIG_SERVER_HOSTNAME/clients/$peer_name.conf.png"
    done

    systemctl enable "wg-quick@wg0"
}

# Setup Docker
install_docker() {
    printf '\nSetting up Docker...\n'

    pacman -S --noconfirm docker docker-compose
    systemctl enable docker # Reboot is needed before it can start

    cp -a /root/arch_pi/docker/ "/home/$CONFIG_USER_NAME/"
    chown -R "$CONFIG_USER_NAME:$CONFIG_USER_NAME" "/home/$CONFIG_USER_NAME/docker/"

    # Set up static leases for PiHole (if provided)
    if [ ! -z "$CONFIG_PIHOLE_DHCP_STATIC_LEASE" ]; then
        mkdir -p "/home/$CONFIG_USER_NAME/docker/pihole/etc-dnsmasq.d"
        echo "$CONFIG_PIHOLE_DHCP_STATIC_LEASE" > "/home/$CONFIG_USER_NAME/docker/pihole/etc-dnsmasq.d/04-pihole-static-dhcp.conf"
        sudo chown -R "$CONFIG_USER_NAME:$CONFIG_USER_NAME" "/home/$CONFIG_USER_NAME/docker/pihole/etc-dnsmasq.d/"
        sudo chmod -R 755 "/home/$CONFIG_USER_NAME/docker/pihole/etc-dnsmasq.d/"
    fi

    # Terminate
    printf '\nAfter reboot, run "~/docker/update x" to get the x container started.\n'
}

# Install from AUR
aur_install() {
    su "$CONFIG_USER_NAME" -c 'mkdir -p /tmp/aur'

    for package in $@; do
        git clone "https://aur.archlinux.org/$package.git/" "/tmp/aur/$package"
        chown -R "$CONFIG_USER_NAME:$CONFIG_USER_NAME" /tmp/aur/

        su "$CONFIG_USER_NAME" -c "cd '/tmp/aur/$package/' && makepkg --noconfirm -s"
        pacman --noconfirm -U "/tmp/aur/$package"/*.pkg.tar.xz
    done

    rm -rf "/tmp/aur"
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit
