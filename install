#!/bin/bash
set -e
#set -x

#######################################
#	PiHole + OpenVPN + nftables on arch ARMv7
#	Assumes a wired connection on $MY_INTERFACE
#
#	Arguments:
#		None
#	Returns:
#		1 upon error
#		0 otherwise
#######################################
function main() {
	local readonly USAGE="Usage: install"

	if [[ "${#}" -ne 0 ]]; then
		err "Error: no argument required, ${#} received"
		err "${USAGE}"
		return 1
	fi

	if [ "${EUID}" -ne 0 ]; then
		err "Please run as root"
		return 2
	fi

	if [[ ! -f .env ]]; then
		err "Could not find .env file"
		return 3
	fi

	# Load .env
	set -o allexport && source .env && set +o allexport

	# Make sure we are ready
	cat .env
	warn	"\nBefore continuing, please make sure that:\n" \
		"\t- The server is set up with a static local IP (${SERVER_LAN_IP});\n" \
		"\t- The variables in .env are correct\n"

	# Change default passwords
	echo -e "\nNew password for root:"
	passwd root
	echo "New passord for alarm:"
	passwd alarm
	useradd -m -G wheel -s /bin/bash "${MY_USER}"
	echo "New password for ${MY_USER}:"
	passwd "${MY_USER}"

	# Set hostname
	echo "${SERVER_HOSTNAME}" > /etc/hostname
	echo -e "127.0.0.1\t\tlocalhost" > /etc/hosts
	echo -e "127.0.1.1\t\t${SERVER_HOSTNAME}.${LAN_DHCP_DOMAIN}\t${SERVER_HOSTNAME}" >> /etc/hosts
	echo -e "${SERVER_LAN_IP}\t\t${SERVER_HOSTNAME}.${LAN_DHCP_DOMAIN}\t${SERVER_HOSTNAME}" >> /etc/hosts

	# Set locale
	sed -i "s/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g" /etc/locale.gen
	locale-gen

	# Get keys, update, install base packages
	pacman-key --init
	pacman-key --populate archlinuxarm
	pacman -Syu
	pacman -S --needed sudo base-devel git nftables vim
	pacman -S --needed starship powerline

	# Configure sudo
	warn "Allow members of wheel group to run sudo"
	visudo

	warn "Set MAKEFLAGS=\"-j4\""
	vim /etc/makepkg.conf

	# Setup services
	#pacman -S --needed cargo && install_from_aur paru
	setup_nftables
	#setup_deluge
	setup_sshd
	setup_openvpn
	setup_unbound
	setup_docker

	warn "Set DNS to 127.0.0.1"
	sed -i "s/DNS=1.1.1.1/DNS=127.0.0.1/g" "/etc/systemd/network/${MY_INTERFACE}.network"
	sed -i "s/DNS=1.0.0.1//g" "/etc/systemd/network/${MY_INTERFACE}.network"
	vim "/etc/systemd/network/${MY_INTERFACE}.network"

	echo "Done. Please reboot"

	return 0
}

#######################################
#       Install from AUR              #
#######################################
function install_from_aur() {
	[[ "${#}" -ne 1 ]] && return 1

	su "${MY_USER}" -c "mkdir -p /home/${MY_USER}/.cache/paru/clone/"
	[[ -d "/home/${MY_USER}/.cache/paru/clone/${1}" ]] && rm -rf "/home/${MY_USER}/.cache/paru/clone/${1}"
	su "${MY_USER}" -c "git clone \"https://aur.archlinux.org/${1}.git/\" \"/home/${MY_USER}/.cache/paru/clone/${1}/\""
	su "${MY_USER}" -c "cd \"/home/${MY_USER}/.cache/paru/clone/${1}/\" && makepkg --noconfirm -s"

	pacman --noconfirm -U "$(ls /home/${MY_USER}/.cache/paru/clone/${1}/*.pkg.tar.xz)"

	return 0
}

#######################################
#        Setup nftables               #
#######################################
function setup_nftables() {
	# Backup
	[[ -f /etc/nftables.conf ]] && mv /etc/nftables.conf /etc/nftables.conf.bak
	
	# Set new config
	cp /root/root/etc/nftables.conf /etc/nftables.conf
	sed -i "s/MY_LAN/${MY_LAN}/g" /etc/nftables.conf
	sed -i "s/MY_VPN_SUBNET/${VPN_SUBNET}/g" /etc/nftables.conf
	vim /etc/nftables.conf

	systemctl enable nftables

	return 0
}

#######################################
#         Setup deluge                #
#######################################
function setup_deluge() {
	pacman -S --needed deluge
	cp -a /root/root/srv/deluge/.config /srv/deluge/

	mkdir -p /mnt/torrent/data /mnt/torrent/add
	chown -R deluge:deluge /mnt/torrent /srv/deluge/
	chmod -R 770 /mnt/torrent
	usermod -a -G deluge "${MY_USER}"

	systemctl enable deluged deluge-web

	return 0
}

#######################################
#         Setup sshd                  #
#######################################
function setup_sshd() {
	mv /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
	cp /root/root/etc/ssh/sshd_config /etc/ssh/sshd_config
	vim /etc/ssh/sshd_config

	# Add personal pubkey
	su "${MY_USER}" -c "mkdir -p ~/.ssh && echo -e \"${MY_PUBKEY}\" >> ~/.ssh/authorized_keys"

	return 0
}

#######################################
#        Setup OpenVPN                #
#######################################
function setup_openvpn() {
	pacman -S openvpn easy-rsa

	# Define env
	export EASYRSA=/etc/easy-rsa/
	export EASYRSA_VARS_FILE=/etc/easy-rsa/vars

	# Set up Easy-rsa vars
	mv "${EASYRSA_VARS_FILE}" "${EASYRSA_VARS_FILE}.bak"
	echo "set_var EASYRSA_ALGO ec" > "${EASYRSA_VARS_FILE}"
	echo "set_var EASYRSA_CURVE secp521r1" >> "${EASYRSA_VARS_FILE}"
	echo "set_var EASYRSA_DIGEST \"sha512\"" >> "${EASYRSA_VARS_FILE}"
	echo "set_var EASYRSA_NS_SUPPORT \"no\"" >> "${EASYRSA_VARS_FILE}"
	vim "${EASYRSA_VARS_FILE}"

	# Set up CA, keys and crt
	openvpn --genkey secret /etc/openvpn/server/ta.key

	cd "${EASYRSA}"
	easyrsa init-pki
	easyrsa build-ca
	easyrsa gen-req "${SERVER_HOSTNAME}" nopass
	easyrsa sign-req server "${SERVER_HOSTNAME}"
	easyrsa gen-crl
	cd /root/

	# Copy keys and cert to /etc/openvpn/
	cp	/etc/easy-rsa/pki/ca.crt \
		"/etc/easy-rsa/pki/private/${SERVER_HOSTNAME}.key" \
		"/etc/easy-rsa/pki/issued/${SERVER_HOSTNAME}.crt" \
		/etc/easy-rsa/pki/crl.pem \
		/etc/openvpn/server/
	
	# Fetch openvpn config
	cp /root/root/etc/openvpn/server/server.conf "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"
	sed -i "s/SERVER_HOSTNAME/${SERVER_HOSTNAME}/g" "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"
	sed -i "s/MY_LAN/${MY_LAN}/g" "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"
	sed -i "s/SERVER_LAN_IP/${SERVER_LAN_IP}/g" "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"
	sed -i "s/VPN_SUBNET/${VPN_SUBNET}/g" "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"
	vim "/etc/openvpn/server/${SERVER_HOSTNAME}.conf"

	mkdir -p /etc/dnsmasq.d/
	echo "interface=tun0" > /etc/dnsmasq.d/00-openvpn.conf

	mkdir -p /etc/openvpn/revoked/
	chown -R openvpn:network /etc/openvpn/server/ /etc/openvpn/client/ /etc/openvpn/revoked/

	systemctl enable "openvpn-server@${SERVER_HOSTNAME}"

	return 0
}

#######################################
#        Setup Unbound                #
#######################################
function setup_unbound() {
	pacman -S --needed unbound expat

	# Backup old config and fetch ours
	[[ -f /etc/unbound/unbound.conf ]] && mv /etc/unbound/unbound.conf /etc/unbound/unbound.conf.bak
	cp /root/root/etc/unbound/unbound.conf /etc/unbound/unbound.conf
	vim /etc/unbound/unbound.conf

	# Fetch and auto-update root.hints
	cp /root/root/etc/systemd/system/roothints.service /etc/systemd/system/
	cp /root/root/etc/systemd/system/roothints.timer /etc/systemd/system/
	systemctl enable --now roothints.timer unbound

	return 0
}

#######################################
#        Setup Docker                 #
#######################################
function setup_docker() {
	pacman -S docker docker-compose
	systemctl enable docker # Fails to start before reboot
	cp -a /root/docker/ "/home/${MY_USER}/"
	chown -R "${MY_USER}":"${MY_USER}" "/home/${MY_USER}/docker/"

	# Update variables in each docker-compose.yml
	cd "/home/${MY_USER}/docker/"
	for d in $(ls -d */); do
		sed -i "s/MY_INTERFACE/${MY_INTERFACE}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/MY_LAN/${MY_LAN}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/LAN_GATEWAY/${LAN_GATEWAY}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/LAN_DHCP_START/${LAN_DHCP_START}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/LAN_DHCP_END/${LAN_DHCP_END}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/LAN_DHCP_DOMAIN/${LAN_DHCP_DOMAIN}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/VPN_SUBNET/${VPN_SUBNET}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/MY_USER/${MY_USER}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/MY_PUBKEY/${MY_PUBKEY}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/MY_EMAIL/${MY_EMAIL}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/SERVER_LAN_IP/${SERVER_LAN_IP}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/SERVER_WAN_IP/${SERVER_WAN_IP}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/SERVER_HOSTNAME/${SERVER_HOSTNAME}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/PIHOLE_ADMIN_PW/${PIHOLE_ADMIN_PW}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/CLOUDFLARE_API_KEY/${CLOUDFLARE_API_KEY}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
		sed -i "s/DDNS_SUBDOMAIN/${DDNS_SUBDOMAIN}/g" "/home/${MY_USER}/docker/${d%%/}/docker-compose.yml"
	done

	warn "\nAfter reboot, run '~/docker/update x' to get the x container started."
	
	return 0
}

#######################################
#       Div helpers                   #
#######################################

function warn() {
	echo -e "${*}"
	echo -n "Press any key to continue or ^C to abort."
	read -s -n 1 key
}

# Print to stderr (from Google)
function err() {
        echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: ${*}" >&2
}

# Functions to run with su
export -f install_from_aur

main "${@}"; exit
