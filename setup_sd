#!/bin/bash
set -e

#######################################
#	Setup SD card with arch for ARMv7
#	https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4
#
#	Arguments:
#		sd (string): path to SD card
#	Returns:
#		1 upon error
#		0 otherwise
#######################################
function main() {
	local readonly USAGE="Usage: setup_sd sd"

	if [[ "${#}" -ne 1 ]]; then
		err "Error: one argument required"
		err "${USAGE}"
		return 1
	fi

	if [[ ! -f .env ]]; then
		err "Please configure .env"
		return 2
	fi

	# Load .env
	set -o allexport && source .env && set +o allexport
	SD="${1}"

	# Checking if $SD exists and ask for confirmation
	[[ ! -e "${SD}" ]] && echo "The device ${SD} does not exist. Aborting." && return 1
	warn "The following device wil be wiped. Continue? ${SD}"

	# Prepare partitions
	sudo bash -c "echo -e \"o\nn\np\n1\n\n+200M\nt\nc\nn\np\n2\n\n\n\nw\" | fdisk ${SD}" # Sorry \_(˚-˚)_/
	sudo mkfs.vfat "${SD}p1"
	sudo mkfs.ext4 "${SD}p2"

	# Mount
	mkdir -p root/ && sudo mount "${SD}p2" root/
	sudo mkdir -p root/boot && sudo mount "${SD}p1" root/boot/

	# Get img and copy to sd
	[[ -f ArchLinuxARM-rpi-4-latest.tar.gz ]] && rm ArchLinuxARM-rpi-4-latest.tar.gz
	wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-4-latest.tar.gz
	sudo bsdtar -xpf ArchLinuxARM-rpi-4-latest.tar.gz -C root
	rm ArchLinuxARM-rpi-4-latest.tar.gz

	# aarch64
	#[[ ! -f ArchLinuxARM-rpi-aarch64-latest.tar.gz ]] && wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz
	#sudo bsdtar -xpf ArchLinuxARM-rpi-aarch64-latest.tar.gz -C root
	#sed -i 's/mmcblk0/mmcblk1/g' root/etc/fstab
	#rm ArchLinuxARM-rpi-aarch64-latest.tar.gz

	sudo sync

	# Set up static ip
	warn "Please set up a static IP for the PI"
	nconfig="[Match]\nName=${INTERFACE}\n\n[Network]\nDHCP=no\nAddress=${SERVER_LAN_IP}/24\nGateway=${LAN_GATEWAY}\nDNS=1.1.1.1\nDNS=1.0.0.1\nDNSSEC=no\n"

	sudo bash -c "echo -e \"${nconfig}\" > root/etc/systemd/network/${INTERFACE}.network"
	sudo vim "root/etc/systemd/network/${INTERFACE}.network"

	# Copy config and install script to root's home folder
	sudo cp -a install .env .env.example docker/ etc/ root/root/
	sudo chown -R root:root root/root/install root/root/.env root/root/.env.example root/root/docker/ root/root/etc/

	sudo umount root/boot/ root/
	rmdir root

	echo -e "\nDone\n"

	return 0
}

function warn() {
	echo -e "${*}"
	echo -n "Press any key to continue or ^C to abort."
	read -s -n 1 key
}

main "${@}"; exit
