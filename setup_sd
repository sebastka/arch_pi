#!/bin/bash
set -e
#set -x

#######################################
#	Setup SD card with arch for Raspberry Pi 4
#	https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4
#
#	Arguments:
#		sd (string): path to SD card
#	Returns:
#		1 upon error
#		0 otherwise
#######################################
function main() {
	local readonly USAGE="Usage: setup_sd sd"

	if [[ "${#}" -ne 1 ]]; then
		err "Error: one argument required, ${#} received"
		err "${USAGE}"
		return 1
	fi

	if [ "${EUID}" -eq 0 ]; then
		err "Error: Please do NOT run as root"
		return 2
	fi

	if [[ ! -f .env ]]; then
		err "Error: Please configure .env"
		return 3
	fi

	# Load .env
	set -o allexport && source .env && set +o allexport
	local readonly SD="${1}"

	prepare_sd "${SD}"
	fetch_arch
	setup_network
	setup_iptables
	setup_sshd
	configure

	# Finish
	warn "\n\nWill now unmount"
	sudo umount mnt/boot/ mnt/
	rmdir mnt

	echo -e "\n\nDone"

	return 0
}

#######################################
#            Prepare SD               #
#######################################
function prepare_sd() {
	[[ "${#}" -ne 1 ]] && return 1
	local readonly SD="${1}"

	# Checking if $SD exists and ask for confirmation
	[[ ! -e "${SD}" ]] && echo "The device ${SD} does not exist. Aborting." && return 1
	warn "The following device wil be wiped. Continue? ${SD}"

	# Repartition and format
	#sudo sfdisk "${SD}" < part.layout # Create layout file: sudo sfdisk -d /dev/mmcblk0 > file
	sudo bash -c "echo -e \"o\nn\np\n1\n\n+200M\nY\nt\nc\nn\np\n2\n\n\nY\nw\" | fdisk ${SD}" # Sorry \_(˚-˚)_/
	sudo mkfs.vfat "${SD}p1"
	sudo mkfs.btrfs -f "${SD}p2"

	# Mount
	mkdir -p mnt/ && sudo mount "${SD}p2" mnt/
	sudo mkdir -p mnt/boot && sudo mount "${SD}p1" mnt/boot/

	return 0
}

#######################################
#   Fetching and copying arch to SD   #
#######################################
function fetch_arch() {
	warn "Fetching arch and copying to SD..."

	# AArch64 (ARMv8)
	if [[ ! -f ArchLinuxARM-rpi-aarch64-latest.tar.gz ]]; then
		echo -e "\nDownloading ArchLinuxARM-rpi-aarch64-latest.tar.gz"
		wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz
		wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz.md5

		# Check integrity
		if ! md5sum --check ArchLinuxARM-rpi-aarch64-latest.tar.gz.md5 &>/dev/null; then
			rm ArchLinuxARM-rpi-aarch64-latest.tar.gz
			rm ArchLinuxARM-rpi-aarch64-latest.tar.gz.md5

			err "Error: checksum failed"
			return 4
		fi

		rm ArchLinuxARM-rpi-aarch64-latest.tar.gz.md5
	fi

	echo -e "\nDecompressing..."
	sudo bsdtar -xpf ArchLinuxARM-rpi-aarch64-latest.tar.gz -C mnt
	
	# Fix fstab
	sudo sed -i 's/mmcblk0/mmcblk1/g' mnt/etc/fstab

	echo -e "Syncing..."
	sync

	# Copy config and install script to root's home folder
	sudo cp -a install .env docker/ root/ mnt/root/
	sudo chown -R root:root mnt/root/install mnt/root/.env mnt/root/docker/ mnt/root/root/

	return 0
}

#######################################
#          Setup Network              #
#######################################
function setup_network() {
	warn "\nSetting up the network..."

	# If wireless
	if [[ ! -z "${CONFIG_LAN_WIFI_SSID}" ]]; then
		echo -e "\n\nSetting up WiFi..."

		sudo mkdir -p mnt/etc/wpa_supplicant/
		sudo bash -c "wpa_passphrase "${CONFIG_LAN_WIFI_SSID}" "${CONFIG_LAN_WIFI_PASSPHRASE}" > mnt/etc/wpa_supplicant/wpa_supplicant-${CONFIG_LAN_INTERFACE}.conf"

		# sudo systemctl enable wpa_supplicant@wlan0
		sudo ln -s ../../../../usr/lib/systemd/system/wpa_supplicant@.service "mnt/etc/systemd/system/multi-user.target.wants/wpa_supplicant@${CONFIG_LAN_INTERFACE}.service"
	fi

	# .network file
	local readonly cidr="${CONFIG_LAN_IP}/$(echo $CONFIG_LAN_NETWORK | cut -d'/' -f2)"
	local readonly nconfig="[Match]\nName=${CONFIG_LAN_INTERFACE}\n\n[Network]\nDHCP=no\nAddress=${cidr}\nGateway=${CONFIG_LAN_GATEWAY}"

	# Remove conflicting config
	sudo mkdir -p mnt/etc/systemd/network/bak/
	sudo mv mnt/etc/systemd/network/*.network mnt/etc/systemd/network/bak/

	# Create config file and check it
	sudo bash -c "echo -e \"${nconfig}\" > mnt/etc/systemd/network/${CONFIG_LAN_INTERFACE}.network"
	sudo vim "mnt/etc/systemd/network/${CONFIG_LAN_INTERFACE}.network"

	# Disable systemd-resolved, since it conflicts with dnsmasq on port 53
	[[ -f mnt/etc/systemd/system/dbus-org.freedesktop.resolve1.service ]] && sudo rm mnt/etc/systemd/system/dbus-org.freedesktop.resolve1.service
	[[ -f mnt/etc/systemd/system/multi-user.target.wants/systemd-resolved.service ]] && sudo rm mnt/etc/systemd/system/multi-user.target.wants/systemd-resolved.service

	# Set up Cloudflare's DNS
	sudo bash -c "unlink mnt/etc/resolv.conf && echo -e \"nameserver 1.1.1.1\nnameserver 1.0.0.1\" > mnt/etc/resolv.conf"

	return 0
}

#######################################
#        Setup iptables               #
#######################################
function setup_iptables() {
	local CONFIG_TRUSTED_NETWORKS="${CONFIG_LAN_NETWORK}"
	[[ ! -z "${CONFIG_OPENVPN_SUBNET}" ]] && CONFIG_TRUSTED_NETWORKS="${CONFIG_TRUSTED_NETWORKS},${CONFIG_OPENVPN_SUBNET}"
	[[ ! -z "${CONFIG_WIREGUARD_SUBNET}" ]] && [[ "${CONFIG_OPENVPN_SUBNET}" != "${CONFIG_WIREGUARD_SUBNET}" ]] && CONFIG_TRUSTED_NETWORKS="${CONFIG_TRUSTED_NETWORKS},${CONFIG_WIREGUARD_SUBNET}"

	# Fetch ssh config, update it and check
	sudo cp root/etc/iptables/iptables.rules mnt/etc/iptables/
	env_replace mnt/etc/iptables/iptables.rules
	sudo vim mnt/etc/iptables/iptables.rules

	# Enable
	sudo ln -s ../../../../usr/lib/systemd/system/iptables.service mnt/etc/systemd/system/multi-user.target.wants/iptables.service

	return 0
}

#######################################
#         Setup sshd                  #
#######################################
function setup_sshd() {
	# Authorize our device to login as 'alarm'
	sudo mkdir -p mnt/home/alarm/.ssh/
	echo -e "${CONFIG_ALARM_AUTHORIZED_KEY}" | sudo tee mnt/home/alarm/.ssh/authorized_keys
	sudo chown -R 1000:1000 mnt/home/alarm/.ssh/

	# Uncomment:
	sudo sed -i '/#StrictModes yes/s/^#//g' mnt/etc/ssh/sshd_config
	sudo sed -i '/#MaxAuthTries 6/s/^#//g' mnt/etc/ssh/sshd_config
	sudo sed -i '/#PubkeyAuthentication yes/s/^#//g' mnt/etc/ssh/sshd_config
	sudo sed -i '/#X11Forwarding no/s/^#//g' mnt/etc/ssh/sshd_config

	# Comment:
	sudo sed -i '/^Subsystem/s/^/#/g' mnt/etc/ssh/sshd_config

	# Substitute:
	sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/g' mnt/etc/ssh/sshd_config
	sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' mnt/etc/ssh/sshd_config
	sudo sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 60m/g' mnt/etc/ssh/sshd_config
	sudo sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 10/g' mnt/etc/ssh/sshd_config

	# Check
	sudo vim mnt/etc/ssh/sshd_config

	return 0
}

#######################################
#             Configure               #
#######################################
function configure() {
	warn "\n\nConfiguring the system"
	
	# Set hostname and hosts
	sudo bash -c "echo \"${CONFIG_SERVER_HOSTNAME}\" > mnt/etc/hostname"
	sudo bash -c "echo -e \"127.0.0.1\t\tlocalhost\n127.0.1.1\t\t${CONFIG_SERVER_HOSTNAME}.${CONFIG_USER_DOMAIN}\t${CONFIG_SERVER_HOSTNAME}\n${CONFIG_LAN_IP}\t\t${CONFIG_SERVER_HOSTNAME}.${CONFIG_USER_DOMAIN}\t${CONFIG_SERVER_HOSTNAME}\n\" > mnt/etc/hosts"

	# Setup locale.gen and global locale.conf
	sudo sed -i '/#en_US.UTF-8 UTF-8/s/^#//g' mnt/etc/locale.gen
	[[ ! -z "${CONFIG_SYSTEM_EXTRA_LOCALE}" ]] && sudo sed -i "/#${CONFIG_SYSTEM_EXTRA_LOCALE} UTF-8/s/^#//g" mnt/etc/locale.gen

	sudo cp root/etc/locale.conf mnt/etc/
	env_replace mnt/etc/locale.conf

	# Set MAKEFLAGS="-j4"
	sudo sed -i '/#MAKEFLAGS="-j2"/MAKEFLAGS="-j4"/g' mnt/etc/makepkg.conf

	# Autodownload updates every a day
	sudo cp root/etc/systemd/system/update_fetcher.* mnt/etc/systemd/system/
	sudo mkdir -p mnt/etc/systemd/system/timers.target.wants/
	sudo ln -s ../update_fetcher.timer mnt/etc/systemd/system/timers.target.wants/update_fetcher.timer

	return 0
}

#######################################
#       Div helpers                   #
#######################################

# Replace all placeholders in passed files with values in env
# env_replace my_file.txt my_file2.txt
function env_replace() {
	[[ "${#}" -lt 1 ]] && err "Error: at least argument expected, ${#} received" && return 1

	for f in ${*}; do
		[[ ! -f "${f}" ]] && err "Error: file '${f}' not found" && return 2

		for config_var in "${!CONFIG_@}"; do
			local readonly escaped=$(printf "%s" "${!config_var}"  | sed -e 's/[]\/$*.^[]/\\&/g')
			sudo sed -i "s/${config_var}/${escaped}/g" "${f}"
		done
	done

	return 0
}

function warn() {
	echo -e "${*}"
	echo -n "Press any key to continue or ^C to abort."
	read -s -n 1 key
}

function err() {
	echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: ${*}" >&2
	return 0
}

main "${@}"; exit
