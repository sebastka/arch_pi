#!/bin/sh
set -e      # Abort upon error
set -u      # Abort upon udefined variable
#set -x      # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#   Description:
#       Setup Arch PI USB installation medium
#   Usage:
#       ./setup_usb dev
#   Arguments:
#        dev (string): Path to USB device (Ex: /dev/sda)
#   Returns:
#       0 upon success
#       >=1 upon error
#######################################
main() {
    # Check if $USAGE is respected
    readonly USAGE='Usage: ./setup_usb dev'
    [ "$#" -eq 1 ] || { err "Error: 1 argument(s) expected, $# received"; err "$USAGE"; return 1; }
    [ "$(id -u)" -ne 0 ] || { err 'Error: Please do NOT run as root'; return 2; }
    [ -f "$path/.env" ] || { err 'Error: Please configure .env'; return 3; }

    # Parameters
    readonly dev="$1"

    load_env
    partition_device
    iso_write
    setup_users
    env_replace
    setup_network
    setup_dhcp
    setup_iptables
    setup_sshd
    configure

    printf '\nDone! Remember to unmount mnt/ and mnt/boot/\n'
}

# Load env
load_env() {
    set -a; . "$path/.env"; set +a;

    # DHCP
    export CONFIG_DHCP_NID="$(echo "$CONFIG_DHCP_SUBNET" | cut -d'/' -f1)"
    export CONFIG_DHCP_MASK="$(cidr2mask "$CONFIG_DHCP_SUBNET")"

    # WireGuard
    export CONFIG_WIREGUAR_GATEWAY="$(echo "$CONFIG_WIREGUARD_SUBNET" | cut -d'.' -f1-3).1"

    # Docker: UID/GID
    export CONFIG_USER_UID='1000'
    export CONFIG_USER_GID='1000'
}

# Wipe old partitions, repartition and mount
partition_device() {
    printf '\nWiping and partitioning device %s...\n' "$dev"

    # Wipe existing partitions
    for p in 1 2 p1 p2 ''; do
        sudo wipefs --all --force "$dev""$p" >/dev/null 2>&1 || true
    done

    # Repartition and format
    cat "$path/fdisk.txt" | sudo fdisk "$dev" >/dev/null

    # Device: sd card or usb?
    [ -e "$dev"p1 ] \
        && readonly part_prefix='p' \
        || readonly part_prefix=''

    sudo mkfs.vfat "$dev""$part_prefix"1 >/dev/null
    sudo mkfs.btrfs -f "$dev""$part_prefix"2 >/dev/null

    # Mount
    mkdir -p mnt
    sudo mount "$dev""$part_prefix"2 mnt

    sudo mkdir -p mnt/boot
    sudo mount "$dev""$part_prefix"1 mnt/boot
}

# Fetch iso, verify and write to device
iso_write() {
    printf '\nFetching arch iso...\n'

    # Get iso and checksum
    readonly iso_url='http://os.archlinuxarm.org/os'
    readonly iso_name='ArchLinuxARM-rpi-aarch64-latest.tar.gz'
    [ -f "$iso_name" ] || wget --quiet "$iso_url/$iso_name"
    wget --quiet -O "$iso_name.md5" "$iso_url/$iso_name.md5"

    printf '\nVerifying arch iso...\n'
    # Check md5sum
    if ! md5sum -c "$iso_name.md5" >/dev/null; then
        err "Error: checksum failed"
        return 3
    fi

    printf '\nWriting arch image to device...\n'
    sudo bsdtar -xpf ArchLinuxARM-rpi-aarch64-latest.tar.gz -C mnt/

    printf "\nSyncing...\n"
    sync
    
    # Fix fstab
    sudo sed -i 's/mmcblk0/mmcblk1/g' mnt/etc/fstab
}

# Setup users
setup_users() {
    # Rename alarm to $CONFIG_USER_NAME
    for f in passwd group shadow gshadow; do
        # Backup
        sudo cp "mnt/etc/$f" "mnt/etc/$f-"

        # Write file
        sudo sed -i "s/alarm/$CONFIG_USER_NAME/g" "mnt/etc/$f"
    done

    # Force root and user to change pw
    sudo sed -i '1 s/:[0-9]*:::/:0:::/' mnt/etc/shadow
    sudo sed -i '$ s/:[0-9]*:0:99999:/:0:0:99999:/' mnt/etc/shadow

    # Move home dir
    sudo mv mnt/home/alarm "mnt/home/$CONFIG_USER_NAME"

    # Add pubkeys
    sudo mkdir -p "mnt/home/$CONFIG_USER_NAME/.ssh/keys"
    echo "$CONFIG_USER_AUTHORIZED_KEYS" \
        | sudo tee "mnt/home/$CONFIG_USER_NAME/.ssh/authorized_keys" >/dev/null

    # Add privkey
    [ -z "$CONFIG_USER_PRIVKEY" ] \
        || echo "$CONFIG_USER_PRIVKEY" \
        | sudo tee "mnt/home/$CONFIG_USER_NAME/.ssh/keys/$CONFIG_USER_NAME@$CONFIG_SERVER_HOSTNAME" >/dev/null

    # Copy config and install script to home dir
    sudo mkdir "mnt/home/$CONFIG_USER_NAME/arch_pi"
    sudo cp -a "$path/install" "$path/.env" "$path/root" "mnt/home/$CONFIG_USER_NAME/arch_pi"
    sudo cp -a "$path/docker" "mnt/home/$CONFIG_USER_NAME"

    # Fetch dotfiles
    [ -z "$CONFIG_USER_DOTFILES" ] \
        || { git clone "$CONFIG_USER_DOTFILES" dotfiles && sudo mv dotfiles "mnt/home/$CONFIG_USER_NAME"; }

    # Permissions
    sudo chown -R "$CONFIG_USER_UID:$CONFIG_USER_GID" "mnt/home/$CONFIG_USER_NAME"
    sudo find "mnt/home/$CONFIG_USER_NAME/.ssh/" -type d -exec chmod 700 {} \;
    sudo find "mnt/home/$CONFIG_USER_NAME/.ssh/" -type f -exec chmod 600 {} \;
}

# Setup Network
setup_network() {
    printf "\nSetting up the network...\n"

    # .network file
    readonly cidr="$CONFIG_LAN_IP/$(echo $CONFIG_LAN_NETWORK | cut -d'/' -f2)"

    # Remove conflicting config
    sudo mkdir -p mnt/etc/systemd/network/bak/
    sudo mv mnt/etc/systemd/network/*.network mnt/etc/systemd/network/bak/

    # Create config file and check it
    printf '[Match]\nName=%s\n\n[Network]\nDHCP=no\nAddress=%s\nGateway=%s\n' \
        "$CONFIG_LAN_INTERFACE" "$cidr" "$CONFIG_LAN_GATEWAY" \
        | sudo tee "mnt/etc/systemd/network/$CONFIG_LAN_INTERFACE.network" >/dev/null

    sudoedit "mnt/etc/systemd/network/$CONFIG_LAN_INTERFACE.network"

    # Disable systemd-resolved, since it conflicts with dnsmasq on port 53
    sudo unlink mnt/etc/systemd/system/dbus-org.freedesktop.resolve1.service || true
    sudo unlink mnt/etc/systemd/system/multi-user.target.wants/systemd-resolved.service || true

    # Set up Cloudflare's DNS
    sudo unlink mnt/etc/resolv.conf | true
    printf 'nameserver 1.1.1.1\nnameserver 1.0.0.1\n' | sudo tee mnt/etc/resolv.conf >/dev/null
}

setup_dhcp() {
    printf "$CONFIG_DHCP_LEASES" \
        | sed 's/,/ /g' \
        | tr [:upper:] [:lower:] \
        | while read mac ip hostname; do
        printf 'host %s {\n  hardware ethernet %s;\n  fixed-address %s;\n  option host-name "%s";\n}\n\n' \
            "$hostname" "$mac" "$ip" "$hostname"
    done | sudo tee -a "mnt/home/$CONFIG_USER_NAME/arch_pi/root/etc/dhcpd.conf" >/dev/null

    # Copy config and enable
    sudo cp "mnt/home/$CONFIG_USER_NAME/arch_pi/root/etc/dhcpd.conf" mnt/etc/
    sudo ln -sf ../../../../usr/lib/systemd/system/dhcpd4.service mnt/etc/systemd/system/multi-user.target.wants/dhcpd4.service
}

# Setup iptables
setup_iptables() {
    # Fetch iptables config, update it and verify
    sudo cp "mnt/home/$CONFIG_USER_NAME/arch_pi/root/etc/iptables/iptables.rules" mnt/etc/iptables/
    sudoedit mnt/etc/iptables/iptables.rules

    # Enable
    sudo ln -sf ../../../../usr/lib/systemd/system/iptables.service mnt/etc/systemd/system/multi-user.target.wants/iptables.service
}

# Set up sshd
setup_sshd() {
    sudo mv mnt/etc/ssh/sshd_config mnt/etc/ssh/sshd_config.bak

    cat mnt/etc/ssh/sshd_config.bak \
        | sed '/#StrictModes yes/s/^#//g' \
        | sed '/#MaxAuthTries 6/s/^#//g' \
        | sed '/#PubkeyAuthentication yes/s/^#//g' \
        | sed '/#X11Forwarding no/s/^#//g' \
        | sed 's/#PermitRootLogin prohibit-password/PermitRootLogin no/g' \
        | sed 's/#PasswordAuthentication yes/PasswordAuthentication no/g' \
        | sed 's/#ClientAliveInterval 0/ClientAliveInterval 60m/g' \
        | sed 's/#ClientAliveCountMax 3/ClientAliveCountMax 10/g' \
        | sudo tee mnt/etc/ssh/sshd_config >/dev/null

    # Verify
    sudoedit mnt/etc/ssh/sshd_config
}

# Configure
configure() {
    printf '\nConfiguring the system\n'
    
    # Set hostname and hosts
    printf '%s\n' "$CONFIG_SERVER_HOSTNAME" | sudo tee mnt/etc/hostname >/dev/null
    printf '127.0.0.1\t\tlocalhost\n127.0.1.1\t\t%s\n' \
        "$CONFIG_SERVER_HOSTNAME" \
        | sudo tee mnt/etc/hosts >/dev/null

    # Set MAKEFLAGS="-j4"
    sudo sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j4"/g' mnt/etc/makepkg.conf

    # Autodownload updates every a day
    sudo cp "mnt/home/$CONFIG_USER_NAME/arch_pi/root/etc/systemd/system/update_fetcher.service" \
        "mnt/home/$CONFIG_USER_NAME/arch_pi/root/etc/systemd/system/update_fetcher.timer" \
        mnt/etc/systemd/system/

    sudo mkdir -p mnt/etc/systemd/system/timers.target.wants/
    sudo ln -sf ../update_fetcher.timer \
        mnt/etc/systemd/system/timers.target.wants/update_fetcher.timer

    # Region and time
    printf 'KEYMAP=%s\n' "$CONFIG_SYSTEM_KEYMAP" | sudo tee mnt/etc/vconsole.conf >/dev/null
    sudo ln -sf "/usr/share/zoneinfo/$CONFIG_SYSTEM_REGION" mnt/etc/localtime

    # Enable default locale
    sudo sed -i '/#en_US.UTF-8 UTF-8/s/^#//g' mnt/etc/locale.gen

    # Setup locale.conf
    printf '' | sudo tee mnt/etc/locale.conf >/dev/null
    for locale in LANGUAGE LANG LC_CTYPE LC_NUMERIC LC_TIME LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION; do
        printf '%s=en_US.utf8\n' "$locale" | sudo tee -a mnt/etc/locale.conf >/dev/null
    done
    printf 'LC_COLLATE=C\n' | sudo tee -a mnt/etc/locale.conf >/dev/null

    # Continue if an alternative locale is provided
    [ ! -z "$CONFIG_SYSTEM_EXTRA_LOCALE" ] || return 0

    # Enable extra locale
    sudo sed -i "/#$CONFIG_SYSTEM_EXTRA_LOCALE.UTF-8 UTF-8/s/^#//g" mnt/etc/locale.gen

    for locale in LC_NUMERIC LC_MONETARY LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION; do
        sudo sed -i "s/$locale=en_US.utf8/$locale=$CONFIG_SYSTEM_EXTRA_LOCALE.utf8/" mnt/etc/locale.conf
    done    
}

# Replace all placeholders
env_replace() {
    printf '\nSubstituting variables\n'

    # Get all vars' name from .env
    SUBST_VARS="$(printenv | sed 's/=.*//' | grep "^$PREFIX" | sed "s/$PREFIX/\$$PREFIX/" | tr '\n' ',')"

    find "$path/root" -type f -printf "%P\n" | while read f; do
        envsubst "$SUBST_VARS" \
            < "$path/root/$f" \
            | sudo tee "mnt/home/$CONFIG_USER_NAME/arch_pi/root/$f" >/dev/null
    done

    find "$path/docker" -type f -printf "%P\n" | while read f; do
        envsubst "$SUBST_VARS" \
            < "$path/docker/$f" \
            | sudo tee "mnt/home/$CONFIG_USER_NAME/docker/$f" >/dev/null
    done
}

# $ cidre2mask 192.168.1.0/24
# 255.255.255.0
cidr2mask() {
    bits="$(echo "$1" | cut -d'/' -f2)"
    mask_list='0.0.0.0\n128.0.0.0\n192.0.0.0\n224.0.0.0\n240.0.0.0\n248.0.0.0\n252.0.0.0\n254.0.0.0\n255.0.0.0\n255.128.0.0\n255.192.0.0\n255.224.0.0\n255.240.0.0\n255.248.0.0\n255.252.0.0\n255.254.0.0\n255.255.0.0\n255.255.128.0\n255.255.192.0\n255.255.224.0\n255.255.240.0\n255.255.248.0\n255.255.252.0\n255.255.254.0\n255.255.255.0\n255.255.255.128\n255.255.255.192\n255.255.255.224\n255.255.255.240\n255.255.255.248\n255.255.255.252\n255.255.255.254\n255.255.255.255\n'

    printf "$mask_list" | sed -n "$(expr "$bits" + 1)"p
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit
