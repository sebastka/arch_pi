#!/usr/sbin/nft -f
flush ruleset

# Service	Port		Protocol
########################################
# SSH		22		TCP
# DNS		53		TCP/UDP
# DHCP		67		UDP
# HTTP		80		TCP
# DHCPv6	546		UDP
# OpenVPN	1194		UDP

# Interfaces
define ext_if = eth0
define vpn_if = tun0

# Subnets
define lan = 10.7.0.0/24
define vpn = 10.8.0.0/24

# Allow the following input ports from lan and vpn
define tcp_allow = { 22, 53, 80 }
define udp_allow = { 53, 67, 546, 1194 }

# Allow the following input ports from wan
define tcp_allow_from_wan = { }
define udp_allow_from_wan = { 1194 }

table inet filter {
        chain input {
                type filter hook input priority 0;
                policy drop;

                # allow established/related connections
                ct state {established, related} accept;

                # early drop of invalid connections
                ct state invalid drop;

                # allow from loopback
                iifname lo accept;

                # allow icmp
                ip protocol icmp accept;
                meta l4proto ipv6-icmp accept;

                # allow from WAN
		tcp dport $tcp_allow_from_wan accept;
                udp dport $udp_allow_from_wan accept;

                # allow from LAN and VPN
                tcp dport $tcp_allow ip saddr { $lan, $vpn } accept;
                udp dport $udp_allow ip saddr { $lan, $vpn } accept;

		# Allow DHCP discover
		udp sport bootpc udp dport bootps ip saddr { $lan, $vpn } accept comment "Accept DHCPDISCOVER (for DHCP-Proxy)"

                # everything else
                reject with icmpx type port-unreachable

                log;
        }

        chain forward {
                type filter hook forward priority 0;
                policy drop

                # Allow existing
                ct state { related, established } accept;

                # Allow packets from vpn interface
                iifname $vpn_if oifname $ext_if accept;
                iifname $ext_if oifname $vpn_if accept;

                log;
        }

        chain output {
                type filter hook output priority 0;
                policy accept;
        }
}

table ip nat {
        chain postrouting {
                type nat hook postrouting priority 100;

                # Enable NAT for VPN
                iifname $vpn_if oifname $ext_if ip saddr $vpn masquerade;

                log;
        }

        chain prerouting {
                type nat hook prerouting priority 0;

                log;
        }
}
