#
#	OpenVPN Server config
#	- Default config: https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/server.conf
#	- Man page: https://build.openvpn.net/man/openvpn-2.5/openvpn.8.html
#
#	Ressources:
#	- https://blog.securityevaluators.com/hardening-openvpn-in-2020-1672c3c4135a
#	- https://www.eduvpn.org/openvpn-and-modern-crypto-part-iii/
#	- https://openvpn.net/community-resources/hardening-openvpn-security/
#

## Generic Options
auth-nocache
chroot CONFIG_OPENVPN_COMMON_NAME/jail					# Chroot to dir after initialization (jail/)
;user nobody						# Unneccessary since openvpn 2.5.0-3: https://bbs.archlinux.org/viewtopic.php?id=262317
;group nobody
persist-key						# Keep the key in memory, don't read again from disk
status CONFIG_OPENVPN_COMMON_NAME/openvpn-status.log 30			# Write status to file every n seconds
status-version 2
tmp-dir tmp						# Specify a directory dir for temporary files (jail/tmp/)
writepid CONFIG_OPENVPN_COMMON_NAME/CONFIG_OPENVPN_COMMON_NAME.pid			# Write OpenVPN's main process ID to file

## Log Options
errors-to-stderr					# Output errors to stderr instead of stdout unless log output is redirected by one of the --log options
;log CONFIG_OPENVPN_COMMON_NAME/openvpn.log					# Output logging messages to file, including output to stdout/stderr which is generated by called scripts (If file already exists it will be truncated)
verb 4							# Set output verbosity to n (default 1)

## Protocol Options
allow-compression no					# As described in the --compress option, compression is a potentially dangerous option
auth SHA512						# Authenticate data channel packets and (if enabled) tls-auth control channel packets with HMAC using message digest algorithm alg (The default is SHA1)
;cipher AES-256-GCM					# DEPRECATED Encrypt data channel packets with cipher algorithm alg. This option is deprecated for server-client mode.
							# Option --data-ciphers or possibly --data-ciphers-fallback should be used instead
data-ciphers AES-256-GCM				# Restrict the allowed ciphers to be negotiated to the ciphers in cipher-list
;ncp-disable						# DEPRECATED Disable "Negotiable Crypto Parameters". This completely disables cipher negotiation

## Server Options
;ccd-exclusive						# Require, as a condition of authentication, that a connecting client has a --client-config-dir file.
;client-config-dir dir					# Specify a directory dir for custom client config files
;client-to-client					# Because the OpenVPN server mode handles multiple clients through a single tun or tap interface, it is effectively a router.
							# The --client-to-client flag tells OpenVPN to internally route client-to-client traffic rather than pushing all client-originating traffic to the TUN/TAP interface
							# See: https://serverfault.com/questions/736274/openvpn-client-to-client
connect-freq 2 sec					# Allow a maximum of n new connections per sec seconds from clients
;duplicate-cn						# Allow multiple clients with the same common name to concurrently connect
;ifconfig-pool-persist CONFIG_OPENVPN_COMMON_NAME/ipp.txt 600		# Persist/unpersist ifconfig-pool data to file, at seconds intervals (default 600), as well as on program startup and shutdown (Incompatible with duplicate-cn)
max-clients 3						# Limit server to a maximum of n concurrent clients
opt-verify						# Clients that connect with options that are incompatible with those of the server will be disconnected (See: )
server CONFIG_OPENVPN_NID CONFIG_OPENVPN_MASK				# Expands as 'mode server; tls-server; push "topology subnet"; ifconfig 10.8.0.1 255.255.255.0; ifconfig-pool 10.8.0.2 10.8.0.253 255.255.255.0; push "route-gateway 10.8.0.1"'
verify-client-cert require				# Specify whether the client is required to supply a valid certificate. Default: require

push "route CONFIG_LAN_NID CONFIG_LAN_MASK"		# Push LAN
;push "route-gateway dhcp"				# Push gateway (default 10.8.0.1): redirects all traffic
push "dhcp-option DNS CONFIG_LAN_IP"			# Push DNS server (pihole)

## Encryption Options
reneg-sec 3600 3240					# Renegotiate data channel key after at most max seconds (default 3600) and at least min seconds (default is 90% of max for servers, and equal to max for clients)

## TLS Mode Options
ca CONFIG_OPENVPN_COMMON_NAME/ca.crt					# Certificate authority (CA) file in .pem format, also referred to as the root certificate
cert CONFIG_OPENVPN_COMMON_NAME/CONFIG_OPENVPN_COMMON_NAME.crt				# Local peer's signed certificate in .pem format (must be signed by a certificate authority whose certificate is in --ca file)
crl-verify crl.pem					# Check peer certificate against a Certificate Revocation List (In chroot dir)
dh none							# Set file to none to disable Diffie Hellman key exchange (and use ECDH only).
							# Note that this requires peers to be using an SSL library that supports ECDH TLS cipher suites (e.g. OpenSSL 1.0.1+, or mbed TLS 2.0+)
ecdh-curve secp521r1					# Specify the curve to use for elliptic curve Diffie Hellman. Available curves can be listed with --show-curves. The specified curve will only be used for ECDH TLS-ciphers
hand-window 10						# Handshake Window -- the TLS-based key exchange must finalize within n seconds of handshake initiation by any peer (default 60 seconds).
							# If the handshake fails we will attempt to reset our connection with our peer and try again
key CONFIG_OPENVPN_COMMON_NAME/CONFIG_OPENVPN_COMMON_NAME.key					# Local peer's private key in .pem format. Use the private key which was generated when you built your peer's cer‐ tificate (see --cert file above).
remote-cert-tls client					# EXPENDS Require that peer certificate was signed with an explicit key usage and extended key usage based on RFC3280 TLS rules.
							# This is a useful security option for clients, to ensure that the host they connect to is a designated server. Or the other way around;
							# for a server to verify that only hosts with a client certificate can connect
;tls-auth file n					# Add an additional layer of HMAC authentication on top of the TLS control channel to mitigate DoS attacks and attacks on the TLS stack.
							# Use --tls-crypt instead if you want to use the key file to not only authenticate, but also encrypt the TLS control channel.
;tls-cipher TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384	# These setting can be used to ensure that certain cipher suites are used (or not used) for the TLS connection.
							# Open‐ VPN uses TLS to secure the control channel, over which the keys that are used to protect the actual VPN traffic are exchanged. For OpenSSL, the --tls-cipher is used for TLS 1.2 and below
tls-ciphersuites TLS_AES_256_GCM_SHA384			# Same as --tls-cipher but for TLS 1.3 and up. mbed TLS has no TLS 1.3 support yet and only the --tls-cipher setting is used. See: --show-tls
tls-crypt CONFIG_OPENVPN_COMMON_NAME/ta.key				# Encrypt and authenticate all control channel packets with the key from keyfile (See --tls-auth for more back‐ground).
							# In contrast to --tls-auth, --tls-crypt does not require the user to set --key-direction
tls-exit						# Exit on TLS negotiation failure
tls-server						# Enable TLS and assume server role during TLS handshake. Note that OpenVPN is designed as a peer-to-peer application.
							# The designation of client or server is only for the purpose of negotiating the TLS control channel
tls-timeout 2						# Packet retransmit timeout on TLS control channel if no acknowledgment from remote within n seconds (default 2).
							# When OpenVPN sends a control packet to its peer, it will expect to receive an acknowledgement within n seconds or it will retransmit the packet, subject to a TCP-like exponential backoff algorithm
tls-version-min 1.3					# Sets the minimum TLS version we will accept from the peer (default is "1.0")

## Network Configuration
bind							# Bind to local address and port
;float							# Allow remote peer to change its IP address and/or port number, such as due to DHCP (this is the default if --remote is not used)
keepalive 10 60						# EXPENDS (keepalive ping-interval timeout) This option can be used on both client and server side, but it is enough to add this on the server side
							# as it will push appropriate --ping and --ping-restart options to the client. If used on both server and client, the values pushed from server will override the client local values.
local CONFIG_LAN_IP						# Local host name or IP address for bind. If specified, OpenVPN will bind to this address only
mode server						# Set OpenVPN major mode. By default, OpenVPN runs in point-to-point mode (p2p). OpenVPN 2.0 introduces a new mode (server) which implements a multi-client server capability
;nobind							# Do not bind to local address and port. The IP stack will allocate a dynamic port for returning packets.
							# Since the value of the dynamic port could not be known in advance by a peer, this option is only suitable for peers which will be initiating connections by using the --remote option
proto udp4						# Use protocol p for communicating with remote host. p can be udp, tcp-client, or tcp-server
port 1194						# EXPENDS TCP/UDP port number or port name for both local and remote (sets both --lport and --rport options to given port)

## Virtual Network Adapter (VPN Interface)
dev tun							# TUN/TAP virtual network device which can be tunX, tapX, null or an arbitrary name string (X can be omitted for a dynamic device)
;ifconfig 10.8.0.1 255.255.255.0			# Set TUN/TAP adapter parameters. It requires the IP address of the local VPN endpoint.
							# For TUN devices in point-to-point mode, the next argument must be the VPN IP address of the remote VPN endpoint.
							# For TAP devices, or TUN devices used with --topology subnet, the second argument is the subnet mask of the virtual network segment which is being created or connected to
persist-tun						# Don't close and reopen TUN/TAP device or run up/down scripts across SIGUSR1 or --ping-restart restarts
topology subnet						# Configure virtual addressing topology when running in --dev tun mode. This directive has no meaning in --dev tap mode, which always uses a subnet topology
