#!/usr/sbin/nft -f
# https://wiki.archlinux.org/index.php/Nftables
flush ruleset


# Service	Port		Protocol	Name
#####################################################
# SSH		22		TCP		ssh
# DNS		53		TCP/UDP
# DHCP		67		UDP		bootps
# DHCP		68		UDP		bootpc
# HTTP		80		TCP		http
# OpenVPN	443		TCP
# DHCPv6	546		UDP
# OpenVPN	1194		UDP
# Deluge-web	8112		TCP		Deluge webUI
# Deluge	56888		TCP/UDP		Random port

# Interfaces
define ext_if = eth0
define vpn_if = tun0

# Subnets
define lan = MY_LAN/24
define vpn = MY_VPN_SUBNET/24

# Allow the following input ports from lan and vpn
define tcp_allow = { 22, 53, 80, 8112 }
define udp_allow = { 53, 1194 }

# Allow the following input ports from wan
define tcp_allow_from_wan = { }
define udp_allow_from_wan = { 1194 }

table inet filter {
        chain input {
                type filter hook input priority 0;
		policy drop;

		iif lo accept comment "Accept from loopback";
		ct state { established, related } accept comment "Allow established/related connections";
		ct state invalid drop comment "Drop invalid connections";

		# Accept L3 protocols + DHCP Discover
		ip protocol igmp accept comment "Accept IGMP";
		ip protocol icmp accept comment "Accept ICMP";
		udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept comment "Accept DHCPDISCOVER";

		# allow from WAN
		#tcp dport $tcp_allow_from_wan accept comment "Accept from WAN on TPC";
                udp dport $udp_allow_from_wan accept comment "Accept from WAN on UDP";

                # allow from LAN and VPN
                tcp dport $tcp_allow ip saddr { $lan, $vpn } accept;
                udp dport $udp_allow ip saddr { $lan, $vpn } accept;

                # everything else
                reject with icmpx type port-unreachable;

                log;
        }

        chain forward {
                type filter hook forward priority 0;
                policy drop

                # Allow existing
                ct state { related, established } accept;

                # Allow packets from vpn interface
                iifname $vpn_if oifname $ext_if accept;
                iifname $ext_if oifname $vpn_if accept;

                log;
        }

        chain output {
                type filter hook output priority 0;
                policy accept;
        }
}

table ip nat {
        chain postrouting {
                type nat hook postrouting priority 100;

                # Enable NAT for VPN
                iifname $vpn_if oifname $ext_if ip saddr $vpn masquerade;

                log;
        }

        chain prerouting {
                type nat hook prerouting priority 0;
                log;
        }
}
