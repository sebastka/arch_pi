#!/usr/sbin/nft -f
# https://wiki.archlinux.org/index.php/Nftables
flush ruleset

# /etc/services
#####################################################
# Service	Port		Protocol	Name
#####################################################
# SSH		22		TCP		ssh
# DNS		53		TCP/UDP		domain
# DHCP		67		UDP		bootps
# DHCP		68		UDP		bootpc
# HTTP		80		TCP		http
# SNMP		161		UDP		snmp
# SNMP		162		UDP		snmptrap
# HTTPS		443		TCP		https
# DHCPv6	546		UDP		dhcpv6-client
# OpenVPN	1194		UDP		openvpn

## Custom ports
#define _deluge_web = 8112
#define _deluge = 56888

# Interfaces
define ext_if = MY_INTERFACE
define vpn_if = tun0

# Subnets
define lan = MY_LAN/24
define vpn = MY_VPN_SUBNET/24

table inet filter {
	chain input {
		type filter hook input priority 0;
		policy drop;

		iif lo accept comment "Accept from loopback";
		ct state { established, related } accept comment "Allow established/related connections";
		ct state invalid drop comment "Drop invalid connections";

		# Allow all ICMP and IGMP traffic, but enforce a rate limit
		ip protocol icmp limit rate 4/second accept comment "Accept ICMP";
		ip6 nexthdr ipv6-icmp limit rate 4/second accept comment "Accept IPv6 ICMP";
		ip protocol igmp limit rate 4/second accept comment "Accept IGMP";

		# Allow DHCPDISCOVER
		udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept comment "Accept DHCPDISCOVER";

		# Open: allow from WAN
		udp dport { openvpn } accept comment "Accept from WAN on UDP";

		# Restricted: allow from LAN and VPN
		tcp dport { ssh, domain, http } ip saddr { $lan, $vpn } accept comment "Accept from LAN/VPN on TPC";
		udp dport { domain, openvpn } ip saddr { $lan, $vpn } accept comment "Accept from LAN/VPN on UDP";

		# everything else
		reject with icmpx type port-unreachable;

		log;
	}

	chain forward {
		type filter hook forward priority 0;
		policy drop;

		# Allow existing
		ct state { related, established } accept;

		# Allow packets from vpn interface
		iifname $vpn_if oifname $ext_if accept;
		iifname $ext_if oifname $vpn_if accept;

		log;
	}

	chain output {
		type filter hook output priority 0;
		policy accept;
	}
}

table ip nat {
	chain postrouting {
		type nat hook postrouting priority 100;

		# Enable NAT for VPN
		iifname $vpn_if oifname $ext_if ip saddr $vpn masquerade;

		log;
	}

	chain prerouting {
		type nat hook prerouting priority 0;
		log;
	}
}
