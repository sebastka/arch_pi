#!/usr/sbin/nft -f
# https://wiki.archlinux.org/index.php/Nftables
flush ruleset

# Custome ports
define _deluge = 6881;			# TCP/UDP
define _deluge_webui = 8112;	# TCP
define _pihole_webui = 61234;	# TCP
#define _wireguard = 51820;		# UDP
define _portainer_webui = 9000;	# TCP

# Interfaces
#define ext_if = ${CONFIG_LAN_INTERFACE};
#define vpn_if = tun0;

# Subnets
#define lan = ${CONFIG_LAN_NETWORK};
#define vpn = ${CONFIG_WIREGUARD_SUBNET};
define docker = 172.0.0.0/8;

table ip nat {
	chain prerouting {
		type nat hook prerouting priority -100;
	}

	chain postrouting {
		type nat hook postrouting priority 100;

		# Enable NAT for VPN
		#iifname $vpn_if oifname $ext_if ip saddr $vpn masquerade;
	}
}

table inet filter {
	chain input {
		type filter hook input priority 0;
		policy drop;

		iif lo accept comment "Accept from loopback";
		ct state { established, related } accept comment "Allow established/related connections";
		ct state invalid drop comment "Drop invalid connections";

		# Allow all ICMP and IGMP traffic, but enforce a rate limit
		ip protocol icmp limit rate 4/second accept comment "Accept ICMP";
		ip6 nexthdr ipv6-icmp limit rate 4/second accept comment "Accept IPv6 ICMP";
		ip protocol igmp limit rate 4/second accept comment "Accept IGMP";

		# Allow DHCPDISCOVER
		udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept comment "Accept DHCPDISCOVER";

		# Open: allow from WAN
		#udp dport { $_wireguard } accept comment "Accept from WAN on UDP";

		# Restricted: allow from LAN
		tcp dport { ssh, domain, http, $_portainer_webui, $_pihole_webui } ip saddr { $lan } accept comment "Accept from LAN/VPN on TPC";
		udp dport { domain } ip saddr { $lan } accept comment "Accept from LAN/VPN on UDP";

		# everything else
		reject with icmpx type port-unreachable;
	}

	chain forward {
		type filter hook forward priority 0;
		policy drop;

		# Allow existing
		#ct state { related, established } accept;

		# Allow packets from vpn interface
		#iifname $vpn_if oifname $ext_if accept;
		#iifname $ext_if oifname $vpn_if accept;
	}

	chain output {
		type filter hook output priority 0;
		policy accept;
	}
}
